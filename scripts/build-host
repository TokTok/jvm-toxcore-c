#!/usr/bin/make -f

TARGET := host

include scripts/common.mk
include scripts/$(shell uname -s).mk

TOOLCHAIN	:= $(DESTDIR)/$(TARGET)
TOOLCHAIN_FILE	:= $(TOOLCHAIN)/.stamp
PREFIX		:= $(TOOLCHAIN)

export CC			:= $(shell which clang || which gcc)
export CXX			:= $(shell which clang++ || which g++)
export PKG_CONFIG_PATH		:= $(PREFIX)/lib/pkgconfig
export TOX4J_PLATFORM		:= $(shell perl -e 'print $$^O')-$(shell uname -m)
export LD_LIBRARY_PATH		:= $(PREFIX)/lib
export DYLD_LIBRARY_PATH	:= $(PREFIX)/lib

build: $(PREFIX)/tox4j.stamp
	./gradlew build

lib/src/main/cpp/ToxAv/generated/im_tox_tox4j_impl_jni_ToxAvJni.h: build
	find . -name "ToxAvJni.class"
	# javah -cp $(PWD)/lib/build/classes/java/main im.tox.tox4j.impl.jni.ToxAvJni
	# mv $(@F) $@

lib/src/main/cpp/ToxCore/generated/im_tox_tox4j_impl_jni_ToxCoreJni.h: build
	find . -name "ToxCoreJni.class"
	# javah -cp $(PWD)/lib/build/classes/java/main im.tox.tox4j.impl.jni.ToxCoreJni
	# mv $(@F) $@

lib/src/main/cpp/ToxCrypto/generated/im_tox_tox4j_impl_jni_ToxCryptoJni.h: build
	find . -name "ToxCryptoJni.class"
	# javah -cp $(PWD)/lib/build/classes/java/main im.tox.tox4j.impl.jni.ToxCryptoJni
	# mv $(@F) $@

%.run: ; $*
regenerate: $(foreach i,$(wildcard bin/Jni*),$i.run) $(wildcard cpp/src/*/generated/*.h)

protobuf_CONFIGURE	:=
libsodium_CONFIGURE	:=
opus_CONFIGURE		:=
libvpx_CONFIGURE	:=
toxcore_CONFIGURE	:=
tox4j_CONFIGURE		:=

$(TOOLCHAIN):
	mkdir -p $@

$(TOOLCHAIN_FILE): $(TOOLCHAIN)
	touch $@

include scripts/release.mk
include scripts/dependencies.mk
